import oracledb
import os

wallet_dir = os.path.abspath("oracle_wallet")

conn = oracledb.connect(
    user=os.getenv("DB_USER"),
    password=os.getenv("DB_PASSWORD"),
    dsn=os.getenv("DB_DSN"),
    wallet_password=os.getenv("WALLET_PASSWORD"),
    wallet_location=wallet_dir,
    config_dir=wallet_dir,
)

cur = conn.cursor()

# Check DB connectivity
cur.execute("SELECT SYSDATE FROM dual")
sysdate = cur.fetchone()[0]
print(f"‚úÖ Connected successfully! SYSDATE: {sysdate}")

# Drop table if it exists
try:
    cur.execute("DROP TABLE test_table PURGE")
    print("üóëÔ∏è Dropped existing table.")
except oracledb.Error as e:
    print("‚ö†Ô∏è Table didn't exist, skipping drop.")

# Create table
cur.execute("""
CREATE TABLE test_table (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    description VARCHAR2(100),
    created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (id)
)""")
print("‚úÖ Table created successfully.")

# Insert data
cur.execute("INSERT INTO test_table (description) VALUES ('Hello Oracle!')")
print("‚úÖ Inserted data successfully.")

# Query data
cur.execute("SELECT id, description, created FROM test_table")
row = cur.fetchone()
assert row is not None, "Data insertion failed!"
print(f"‚úÖ Data verified: {row}")

# Update data
cur.execute("UPDATE test_table SET description = 'Updated description' WHERE id = :1", [row[0]])
print("‚úÖ Data updated successfully.")

# Verify update
cur.execute("SELECT description FROM test_table WHERE id = :1", [row[0]])
updated_row = cur.fetchone()
assert updated_row[0] == 'Updated description', "Data update verification failed!"
print(f"‚úÖ Update verified: {updated_row[0]}")

# Delete data
cur.execute("DELETE FROM test_table WHERE id = :1", [row[0]])
print("‚úÖ Data deleted successfully.")

# Final verification (should be empty)
cur.execute("SELECT COUNT(*) FROM test_table")
count = cur.fetchone()[0]
assert count == 0, "Table cleanup failed!"
print("‚úÖ Table cleanup verified!")

cur.close()
conn.commit()
conn.close()
